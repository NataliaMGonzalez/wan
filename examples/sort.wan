program bubblesort;

# Print Array
action printArray(int arr[6]) {
  int i;
  i = 0;
  while(i < 6){
      print(arr[i]);
      i = i + 1;
  }
  print("---------------------");
}

# Bubble sort
action bubbleSort(int arr[6]) {
  int i, j, aux;
  i = 0;
  while(i < 6){
    j = 0;
    while(j < 6 - 1){
      if(arr[j] > arr[j + 1]){
        aux = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = aux; 
      }
      j = j + 1;
    }
    i = i + 1;
  }
}

int partition(int arr[6], int start, int end) {
  int pivot;
  pivot = arr[start];

  int count;
  count = 0;
  int i;
  i = start + 1;
  while (i <= end) {
    if (arr[i] <= pivot) {
    count = count + 1;
    }
    i = i + 1;
  }

  # Giving pivot element its correct position
  int pivot_index;
  pivot_index = start + count;
  swap(arr, pivot_index, start);

  # Sorting left and right parts of the pivot element
  i = start;
  int j;
  j = end;
  while (i < pivot_index && j > pivot_index) {
    while (arr[i] <= pivot) {
      i = i + 1;
    }

    while (arr[j] > pivot) {
      j = j - 1;
    }

    if (i < pivot_index && j > pivot_index) {
      swap(arr, i, j);
      i = i + 1;
      j = j - 1;
    }
  }

  return pivot_index;
}
 
action quickSort(int arr[6], int start, int end) {
  if (start < end) {
    int p;
    p = partition(arr, start, end);
    quickSort(arr, start, p - 1);
    quickSort(arr, p + 1, end);
  }
}

action swap(int arr[6], int a, int b) {
  int aux;
  aux = arr[a];
  arr[a] = arr[b];
  arr[b] = aux;
}

int arr[6];

# print array
arr[0] = 8;
arr[1] = 3;
arr[2] = 10;
arr[3] = 8;
arr[4] = 4;
arr[5] = 1;
printArray(arr);
bubbleSort(arr);
printArray(arr);

arr[0] = 8;
arr[1] = 3;
arr[2] = 10;
arr[3] = 8;
arr[4] = 4;
arr[5] = 1;
printArray(arr);
quickSort(arr, 0, 5);
printArray(arr);
